legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
library(flexdashboard)
library(tidyverse)
library(plotly)
library(dygraphs)
library(DT)
library(gapminder)
library(gridExtra)
library(ggthemes)
wdbc <- tbl_df(read.table('wdbc.data', strip.white = T,
sep = ',', header = F))
feature_names <- c('radius', 'texture', 'perimeter', 'area', 'smoothness', 'compactness',
'concavity', 'concave_points', 'symmetry', 'fractal_dim')
names(wdbc) <- c('id',
'class',
paste0('mean_', feature_names),
paste0('se_', feature_names),
paste0('worst_', feature_names))
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
group_by(class) %>%
count() %>%
ungroup() %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
custom_theme() -> p1
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
group_by(class) %>%
count() %>%
ungroup() %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
custom_theme -> p1
ggplotly(p1)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
group_by(class) %>%
count() %>%
ungroup() %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_manual(palette = 'Set1') +
custom_theme -> p1
ggplotly(p1)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
group_by(class) %>%
count() %>%
ungroup() %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_brewer(palette = 'Set1') +
custom_theme -> p1
ggplotly(p1)
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_fill_brewer(palette = 'Set1') -> p2
ggplotly(p2)
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_color_manual(palette = 'Set1') -> p2
ggplotly(p2)
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_color_manual(values = c('blue', 'red')) -> p2
ggplotly(p2)
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_color_manual(values = c('red', 'blue')) -> p2
ggplotly(p2)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
group_by(class) %>%
count() %>%
ungroup() %>%
ggplot(aes(class, n, fill = class)) + geom_bar(stat = 'identity') +
scale_fill_manual(values = c('red', 'blue')) +
custom_theme -> p1
ggplotly(p1)
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_color_manual(values = c('red', 'blue')) -> p2
ggplotly(p2)
wdbc %>% ggplot(aes(class, mean_radius, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha= .5) +
scale_color_manual(values = c('red', 'blue')) -> p3
ggplotly(p3)
wdbc %>%
ggplot(aes(mean_concave_points, mean_radius, col = class)) +
geom_jitter(alpha = .7) +
geom_smooth(alpha = .5)  +
scale_color_manual(values = c('red', 'blue')) -> p4
ggplotly(p4)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>% ggplot(aes(class, mean_concave_points, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha = .3) +
scale_color_manual(values = c('red', 'blue')) +
custom_theme -> p2
ggplotly(p2)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>% ggplot(aes(class, mean_radius, col = class)) +
geom_jitter(alpha = .5) +
geom_boxplot(alpha= .5) +
scale_color_manual(values = c('red', 'blue')) +
custom_theme -> p3
ggplotly(p3)
custom_theme <- theme_tufte() +
theme(legend.position = c(.9, .9),
legend.title = element_text(face = 'italic', size = 12),
axis.title = element_text(face = 'bold', size = 14))
wdbc %>%
ggplot(aes(mean_concave_points, mean_radius, col = class)) +
geom_jitter(alpha = .7) +
geom_smooth(alpha = .5)  +
scale_color_manual(values = c('red', 'blue')) +
custom_theme -> p4
ggplotly(p4)
View(mtcars.cyl)
setwd("~/myShiny/HTML_Widgets_Showcases")
library(d3heatmap)
install.packages('d3heatmap')
library(flexdashboard)
# install.packages('d3heatmap')
library(d3heatmap)
d3heatmap(mtcars, scale = 'column', colors="Blues")
d3heatmap(mtcars$mpg, scale = 'column', colors="Blues")
mtcars %>% glimpse()
mtcars %>%
select(-cyl)
mtcars %>%
select(-cyl) -> mtcars_1
d3heatmap(mtcars_1, scale = 'column', colors="Blues")
mtcars_1
mtcars %>%
mutate(cyl = as.numeric(cyl)) -> mtcars_1
d3heatmap(mtcars_1, scale = 'column', colors="Blues")
mtcars %>%
mutate(cyl = as.numeric(cyl)) -> mtcars_1
mtcars_1
mtcars$cyl <- as.numeric(mtcars$cyl)
d3heatmap(mtcars_1, scale = 'column', colors="Blues")
mtcars
mtcars %>% row.names()
mtcars$cyl <- as.numeric(mtcars$cyl)
mtcars
d3heatmap(mtcars_1, scale = 'column', colors="Blues")
data("mtcars")
mtcars$cyl <- as.numeric(mtcars$cyl)
mtcars
d3heatmap(mtcars_1, scale = 'column', colors="Blues")
mtcars
d3heatmap(mtcars_1[, -2], scale = 'column', colors="Blues")
data("mtcars")
d3heatmap(mtcars[, -2], scale = 'column', colors="Blues")
library(flexdashboard)
# install.packages('d3heatmap')
library(d3heatmap)
library(dygraphs)
library(plotly)
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
nhtemp
dygraph(nhtemp, main = "New Haven Temperatures")
?dygraph
nhtemp
nhtemp %>% class()
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
library(xts)
library(flexdashboard)
# install.packages('d3heatmap')
library(d3heatmap)
library(dygraphs)
library(plotly)
library(xts)
data("sample_matrix")
m <- tail(sample_matrix, n=32)
m
cbind(m, apply(m[, 1:3], 1, mean))
m %>%
as_tibble()
?as_tibble()
m %>%
as_tibble(rownames = NA)
m %>%
as.data.frame()
m %>%
as.data.frame() %>%
`row.names<-.data.frame`()
m %>%
as.data.frame() %>%
row.names.data.frame()
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe()
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value)
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name)
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name) -> date_Df
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name) -> date_df
m %>% as_tibble()
m %>% as_tibble() -> m_df
date_df %>%
bind_cols(m_df)
date_df %>%
bind_cols(m_df) %>%
mutate(mean = rowMeans(Open:Low))
date_df %>%
bind_cols(m_df)
date_df %>%
bind_cols(m_df) %>%
gather(-date, -close)
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close))
date_df
date_df %>%
bind_cols(m_df)
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close)) %>%
group_by(date) %>%
summarise(mean.value = mean(value))
mean(c(47.78866, 47.93267, 47.78866))
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close)) %>%
group_by(date) %>%
summarise(mean.value = mean(value)) -> mean_df
date_df %>%
bind_cols(m_df) %>%
bind_cols(mean_df)
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date')
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
dygraph()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date')
cbind(m, apply(m[, 1:3], 1, mean))
cbind(m, apply(m[, 1:3], 1, mean)) %>% class()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
as.matrix
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
as.matrix %>% dygraph()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
as.matrix
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date')
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.POSIXct(date))
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.POSIXct(date)) %>%
as.xts()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.POSIXct(date))
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.POSIXct(date)) %>% str()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date)) %>% str()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date)) %>% as.xts()
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date))
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date)) -> date_df
data("sample_matrix")
m <- tail(sample_matrix, n=32)
cbind(m, apply(m[, 1:3], 1, mean))
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name) -> date_df
m %>% as_tibble() -> m_df
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close)) %>%
group_by(date) %>%
summarise(mean.value = mean(value)) -> mean_df
data("sample_matrix")
m <- tail(sample_matrix, n=32)
# cbind(m, apply(m[, 1:3], 1, mean))
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name) -> date_df
m %>% as_tibble() -> m_df
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close)) %>%
group_by(date) %>%
summarise(mean.value = mean(value)) -> mean_df
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date)) -> date_df_1
date_df_1
xts(date_df_1[, -1], date_df_1[, 1])
date_df_1[, 1]
date_df_1[, -1]
xts(date_df_1[, -1], date_df_1[, 1], order.by = 'date')
xts(date_df_1[, -1], date_df_1[, 1], order.by = date_df_1[, 1])
xts(date_df_1[, -1], date_df_1[, 1], order.by = date_df_1[, 1])
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date, "%Y-%m-%d")) -> date_df_1
xts(date_df_1[, -1], date_df_1[, 1])
xts(date_df_1[, -1], date_df_1[, 1], order.by = as.POSIXct(date_df_1$date))
m <- xts(date_df_1[, -1], date_df_1[, 1], order.by = as.POSIXct(date_df_1$date))
saveRDS(m, file = 'm.rds')
data("sample_matrix")
m <- tail(sample_matrix, n=32)
# cbind(m, apply(m[, 1:3], 1, mean))
m %>%
as.data.frame() %>%
row.names.data.frame() %>% enframe() %>%
rename(date = value) %>%
select(-name) -> date_df
m %>% as_tibble() -> m_df
date_df %>%
bind_cols(m_df) %>%
gather(variable, value, -c(date, Close)) %>%
group_by(date) %>%
summarise(mean.value = mean(value)) -> mean_df
date_df %>%
bind_cols(m_df) %>%
left_join(mean_df, by = 'date') %>%
mutate(date = as.Date(date, "%Y-%m-%d")) -> date_df_1
m <- xts(date_df_1[, -1], date_df_1[, 1], order.by = as.POSIXct(date_df_1$date))
saveRDS(m, file = 'm.rds')
readRDS('m.rds')
m <- readRDS('m.rds')
dygraph(m) %>%
dyCandlestick()
# data("sample_matrix")
# m <- tail(sample_matrix, n=32)
#
# # cbind(m, apply(m[, 1:3], 1, mean))
#
# m %>%
#   as.data.frame() %>%
#   row.names.data.frame() %>% enframe() %>%
#   rename(date = value) %>%
#   select(-name) -> date_df
#
# m %>% as_tibble() -> m_df
#
# date_df %>%
#   bind_cols(m_df) %>%
#   gather(variable, value, -c(date, Close)) %>%
#   group_by(date) %>%
#   summarise(mean.value = mean(value)) -> mean_df
#
# date_df %>%
#   bind_cols(m_df) %>%
#   left_join(mean_df, by = 'date') %>%
#   mutate(date = as.Date(date, "%Y-%m-%d")) -> date_df_1
#
# m <- xts(date_df_1[, -1], date_df_1[, 1], order.by = as.POSIXct(date_df_1$date))
# saveRDS(m, file = 'm.rds')
m <- readRDS('m.rds')
dygraph(m) %>%
dyCandlestick()
library(plotly)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
install.packages('metricgraphics')
install.packages('metricsgraphics')
# install.packages('metricsgraphics')
library(metricsgraphics)
library(flexdashboard)
# install.packages('d3heatmap')
library(d3heatmap)
library(dygraphs)
library(plotly)
library(xts)
# install.packages('metricsgraphics')
library(metricsgraphics)
# library(metricgraphics)
mtcars %>%
mjs_plot(aes(x = wt, y = mpg )) %>%
mjs_point(color_accessor = carb, size_accessor = carb) %>%
mjs_labs(x = "Weight of Car", y = "Miles per Gallon")
# library(metricgraphics)
mjs_plot(mtcars, aes(x = wt, y = mpg )) %>%
mjs_point(color_accessor = carb, size_accessor = carb) %>%
mjs_labs(x = "Weight of Car", y = "Miles per Gallon")
mjs_plot(mtcars, aes(x = wt, y = mpg)) %>%
mjs_point(color_accessor = carb, size_accessor = carb)
library(metricsgraphics)
mjs_plot(mtcars, x=wt, y=mpg) %>%
mjs_point(color_accessor=carb, size_accessor=carb) %>%
mjs_labs(x="Weight of Car", y="Miles per Gallon")
library(metricsgraphics)
mjs_plot(mtcars, x=wt, y=mpg) %>%
mjs_point(color_accessor=carb) %>%
mjs_labs(x="Weight of Car", y="Miles per Gallon")
library(metricsgraphics)
mjs_plot(mtcars, x=wt, y=mpg) %>%
mjs_point(color_accessor=carb, size_accessor=carb) %>%
mjs_labs(x="Weight of Car", y="Miles per Gallon")
library(flexdashboard)
# install.packages('d3heatmap')
library(d3heatmap)
library(dygraphs)
library(plotly)
library(xts)
# install.packages('metricsgraphics')
library(metricsgraphics)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(dygraphs)
library(DT)
library(gapminder)
library(gridExtra)
library(ggthemes)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lng=174.768, lat=-36.852, popup="The bith place of R")
data("mtcars")
d3heatmap(mtcars[, -2], scale = 'column', colors="Blues")
library(datasets)
library(faithful)
library(datasets)
data(faithful)
library(datasets)
data(faithful)
?d3heatmap
setwd("~/mlr")
install.packages("mlr")
install.packages("mlr")
install.packages("mlr")
install.packages("mlr")
